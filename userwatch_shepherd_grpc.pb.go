// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userwatchgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShepherdClient is the client API for Shepherd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShepherdClient interface {
	// Requests and Validation
	Validate(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*AnalysisResponsePublic, error)
	GetDeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error)
	// Verifying Challenge Responses
	CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...grpc.CallOption) (*CreateChallengeResponse, error)
	VerifyChallenge(ctx context.Context, in *ChallengeVerificationRequest, opts ...grpc.CallOption) (*ChallengeVerificationResponse, error)
}

type shepherdClient struct {
	cc grpc.ClientConnInterface
}

func NewShepherdClient(cc grpc.ClientConnInterface) ShepherdClient {
	return &shepherdClient{cc}
}

func (c *shepherdClient) Validate(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*AnalysisResponsePublic, error) {
	out := new(AnalysisResponsePublic)
	err := c.cc.Invoke(ctx, "/uwGrpc.Shepherd/validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) GetDeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error) {
	out := new(DeviceListResponse)
	err := c.cc.Invoke(ctx, "/uwGrpc.Shepherd/getDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...grpc.CallOption) (*CreateChallengeResponse, error) {
	out := new(CreateChallengeResponse)
	err := c.cc.Invoke(ctx, "/uwGrpc.Shepherd/createChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) VerifyChallenge(ctx context.Context, in *ChallengeVerificationRequest, opts ...grpc.CallOption) (*ChallengeVerificationResponse, error) {
	out := new(ChallengeVerificationResponse)
	err := c.cc.Invoke(ctx, "/uwGrpc.Shepherd/verifyChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShepherdServer is the server API for Shepherd service.
// All implementations must embed UnimplementedShepherdServer
// for forward compatibility
type ShepherdServer interface {
	// Requests and Validation
	Validate(context.Context, *ValidationRequest) (*AnalysisResponsePublic, error)
	GetDeviceList(context.Context, *DeviceListRequest) (*DeviceListResponse, error)
	// Verifying Challenge Responses
	CreateChallenge(context.Context, *CreateChallengeRequest) (*CreateChallengeResponse, error)
	VerifyChallenge(context.Context, *ChallengeVerificationRequest) (*ChallengeVerificationResponse, error)
	mustEmbedUnimplementedShepherdServer()
}

// UnimplementedShepherdServer must be embedded to have forward compatible implementations.
type UnimplementedShepherdServer struct {
}

func (UnimplementedShepherdServer) Validate(context.Context, *ValidationRequest) (*AnalysisResponsePublic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedShepherdServer) GetDeviceList(context.Context, *DeviceListRequest) (*DeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceList not implemented")
}
func (UnimplementedShepherdServer) CreateChallenge(context.Context, *CreateChallengeRequest) (*CreateChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChallenge not implemented")
}
func (UnimplementedShepherdServer) VerifyChallenge(context.Context, *ChallengeVerificationRequest) (*ChallengeVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChallenge not implemented")
}
func (UnimplementedShepherdServer) mustEmbedUnimplementedShepherdServer() {}

// UnsafeShepherdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShepherdServer will
// result in compilation errors.
type UnsafeShepherdServer interface {
	mustEmbedUnimplementedShepherdServer()
}

func RegisterShepherdServer(s grpc.ServiceRegistrar, srv ShepherdServer) {
	s.RegisterService(&Shepherd_ServiceDesc, srv)
}

func _Shepherd_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uwGrpc.Shepherd/validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).Validate(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_GetDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).GetDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uwGrpc.Shepherd/getDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).GetDeviceList(ctx, req.(*DeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_CreateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).CreateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uwGrpc.Shepherd/createChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).CreateChallenge(ctx, req.(*CreateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_VerifyChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).VerifyChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uwGrpc.Shepherd/verifyChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).VerifyChallenge(ctx, req.(*ChallengeVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shepherd_ServiceDesc is the grpc.ServiceDesc for Shepherd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shepherd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uwGrpc.Shepherd",
	HandlerType: (*ShepherdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "validate",
			Handler:    _Shepherd_Validate_Handler,
		},
		{
			MethodName: "getDeviceList",
			Handler:    _Shepherd_GetDeviceList_Handler,
		},
		{
			MethodName: "createChallenge",
			Handler:    _Shepherd_CreateChallenge_Handler,
		},
		{
			MethodName: "verifyChallenge",
			Handler:    _Shepherd_VerifyChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userwatch_shepherd.proto",
}
