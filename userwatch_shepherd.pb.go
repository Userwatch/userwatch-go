// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: userwatch_shepherd.proto

package userwatchgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalysisResponsePublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action              Outcome         `protobuf:"varint,1,opt,name=action,proto3,enum=uwGrpc.Outcome" json:"action,omitempty"`
	IsUsingVPN          bool            `protobuf:"varint,3,opt,name=isUsingVPN,proto3" json:"isUsingVPN,omitempty"`
	IsUsingTOR          bool            `protobuf:"varint,4,opt,name=isUsingTOR,proto3" json:"isUsingTOR,omitempty"`
	Flag                []*Flag         `protobuf:"bytes,6,rep,name=flag,proto3" json:"flag,omitempty"`
	UserInfo            *UserInfo       `protobuf:"bytes,7,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	DeviceInfo          *DeviceInfo     `protobuf:"bytes,8,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	GeoInfo             *GeoInfo        `protobuf:"bytes,9,opt,name=geoInfo,proto3" json:"geoInfo,omitempty"`
	RequestID           string          `protobuf:"bytes,10,opt,name=requestID,proto3" json:"requestID,omitempty"`
	SupportedChallenges []ChallengeType `protobuf:"varint,11,rep,packed,name=supportedChallenges,proto3,enum=uwGrpc.ChallengeType" json:"supportedChallenges,omitempty"`
	EventType           EventType       `protobuf:"varint,12,opt,name=eventType,proto3,enum=uwGrpc.EventType" json:"eventType,omitempty"`
}

func (x *AnalysisResponsePublic) Reset() {
	*x = AnalysisResponsePublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisResponsePublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisResponsePublic) ProtoMessage() {}

func (x *AnalysisResponsePublic) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisResponsePublic.ProtoReflect.Descriptor instead.
func (*AnalysisResponsePublic) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{0}
}

func (x *AnalysisResponsePublic) GetAction() Outcome {
	if x != nil {
		return x.Action
	}
	return Outcome_UNKNOWN_DEFAULT_OUTCOME
}

func (x *AnalysisResponsePublic) GetIsUsingVPN() bool {
	if x != nil {
		return x.IsUsingVPN
	}
	return false
}

func (x *AnalysisResponsePublic) GetIsUsingTOR() bool {
	if x != nil {
		return x.IsUsingTOR
	}
	return false
}

func (x *AnalysisResponsePublic) GetFlag() []*Flag {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *AnalysisResponsePublic) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AnalysisResponsePublic) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *AnalysisResponsePublic) GetGeoInfo() *GeoInfo {
	if x != nil {
		return x.GeoInfo
	}
	return nil
}

func (x *AnalysisResponsePublic) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *AnalysisResponsePublic) GetSupportedChallenges() []ChallengeType {
	if x != nil {
		return x.SupportedChallenges
	}
	return nil
}

func (x *AnalysisResponsePublic) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_UNKNOWN_DEFAULT_EVENTTYPE
}

type DeviceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DeviceListRequest) Reset() {
	*x = DeviceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListRequest) ProtoMessage() {}

func (x *DeviceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListRequest.ProtoReflect.Descriptor instead.
func (*DeviceListRequest) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceListRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeviceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceInfo `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *DeviceListResponse) Reset() {
	*x = DeviceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListResponse) ProtoMessage() {}

func (x *DeviceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListResponse.ProtoReflect.Descriptor instead.
func (*DeviceListResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceListResponse) GetDevices() []*DeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

type ValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidationToken          string                        `protobuf:"bytes,1,opt,name=validationToken,proto3" json:"validationToken,omitempty"`
	Userinfo                 *UserInfo                     `protobuf:"bytes,2,opt,name=userinfo,proto3" json:"userinfo,omitempty"`
	ChallengeVerification    *ChallengeVerificationRequest `protobuf:"bytes,4,opt,name=challengeVerification,proto3" json:"challengeVerification,omitempty"`
	EventType                EventType                     `protobuf:"varint,5,opt,name=eventType,proto3,enum=uwGrpc.EventType" json:"eventType,omitempty"`
	CustomerDefinedEventType string                        `protobuf:"bytes,6,opt,name=customerDefinedEventType,proto3" json:"customerDefinedEventType,omitempty"`
	SubEventType             string                        `protobuf:"bytes,8,opt,name=subEventType,proto3" json:"subEventType,omitempty"`
}

func (x *ValidationRequest) Reset() {
	*x = ValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationRequest) ProtoMessage() {}

func (x *ValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationRequest.ProtoReflect.Descriptor instead.
func (*ValidationRequest) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{3}
}

func (x *ValidationRequest) GetValidationToken() string {
	if x != nil {
		return x.ValidationToken
	}
	return ""
}

func (x *ValidationRequest) GetUserinfo() *UserInfo {
	if x != nil {
		return x.Userinfo
	}
	return nil
}

func (x *ValidationRequest) GetChallengeVerification() *ChallengeVerificationRequest {
	if x != nil {
		return x.ChallengeVerification
	}
	return nil
}

func (x *ValidationRequest) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_UNKNOWN_DEFAULT_EVENTTYPE
}

func (x *ValidationRequest) GetCustomerDefinedEventType() string {
	if x != nil {
		return x.CustomerDefinedEventType
	}
	return ""
}

func (x *ValidationRequest) GetSubEventType() string {
	if x != nil {
		return x.SubEventType
	}
	return ""
}

type ChallengeVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeID                string        `protobuf:"bytes,1,opt,name=challengeID,proto3" json:"challengeID,omitempty"`
	SecretResponse             string        `protobuf:"bytes,2,opt,name=secretResponse,proto3" json:"secretResponse,omitempty"`
	WebauthnCredentialResponse []byte        `protobuf:"bytes,3,opt,name=webauthnCredentialResponse,proto3" json:"webauthnCredentialResponse,omitempty"`
	Userinfo                   *UserInfo     `protobuf:"bytes,6,opt,name=userinfo,proto3" json:"userinfo,omitempty"` // Not required if sending with a validation request
	DeviceID                   string        `protobuf:"bytes,7,opt,name=deviceID,proto3" json:"deviceID,omitempty"` // Not required if sending with a validation request
	Type                       ChallengeType `protobuf:"varint,5,opt,name=type,proto3,enum=uwGrpc.ChallengeType" json:"type,omitempty"`
	ReportToken                string        `protobuf:"bytes,8,opt,name=reportToken,proto3" json:"reportToken,omitempty"`
}

func (x *ChallengeVerificationRequest) Reset() {
	*x = ChallengeVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeVerificationRequest) ProtoMessage() {}

func (x *ChallengeVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeVerificationRequest.ProtoReflect.Descriptor instead.
func (*ChallengeVerificationRequest) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{4}
}

func (x *ChallengeVerificationRequest) GetChallengeID() string {
	if x != nil {
		return x.ChallengeID
	}
	return ""
}

func (x *ChallengeVerificationRequest) GetSecretResponse() string {
	if x != nil {
		return x.SecretResponse
	}
	return ""
}

func (x *ChallengeVerificationRequest) GetWebauthnCredentialResponse() []byte {
	if x != nil {
		return x.WebauthnCredentialResponse
	}
	return nil
}

func (x *ChallengeVerificationRequest) GetUserinfo() *UserInfo {
	if x != nil {
		return x.Userinfo
	}
	return nil
}

func (x *ChallengeVerificationRequest) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *ChallengeVerificationRequest) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_UNKNOWN_DEFAULT_CHALLENGE_TYPE
}

func (x *ChallengeVerificationRequest) GetReportToken() string {
	if x != nil {
		return x.ReportToken
	}
	return ""
}

type ChallengeVerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeCompletedSuccessfully *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=challengeCompletedSuccessfully,proto3" json:"challengeCompletedSuccessfully,omitempty"`
	EventType                      EventType             `protobuf:"varint,3,opt,name=eventType,proto3,enum=uwGrpc.EventType" json:"eventType,omitempty"`
	CustomerDefinedEventType       string                `protobuf:"bytes,4,opt,name=customerDefinedEventType,proto3" json:"customerDefinedEventType,omitempty"`
	SubEventType                   string                `protobuf:"bytes,5,opt,name=subEventType,proto3" json:"subEventType,omitempty"`
}

func (x *ChallengeVerificationResponse) Reset() {
	*x = ChallengeVerificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeVerificationResponse) ProtoMessage() {}

func (x *ChallengeVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeVerificationResponse.ProtoReflect.Descriptor instead.
func (*ChallengeVerificationResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{5}
}

func (x *ChallengeVerificationResponse) GetChallengeCompletedSuccessfully() *wrapperspb.BoolValue {
	if x != nil {
		return x.ChallengeCompletedSuccessfully
	}
	return nil
}

func (x *ChallengeVerificationResponse) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_UNKNOWN_DEFAULT_EVENTTYPE
}

func (x *ChallengeVerificationResponse) GetCustomerDefinedEventType() string {
	if x != nil {
		return x.CustomerDefinedEventType
	}
	return ""
}

func (x *ChallengeVerificationResponse) GetSubEventType() string {
	if x != nil {
		return x.SubEventType
	}
	return ""
}

type CreateChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     ChallengeType `protobuf:"varint,1,opt,name=type,proto3,enum=uwGrpc.ChallengeType" json:"type,omitempty"`
	Userinfo                 *UserInfo     `protobuf:"bytes,2,opt,name=userinfo,proto3" json:"userinfo,omitempty"` // Userinfo is used for phone numbers and email details
	DeviceID                 string        `protobuf:"bytes,4,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Origin                   string        `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"` // Required for webauthn and should be consistent eg. login.company.com or similar
	EventType                EventType     `protobuf:"varint,6,opt,name=eventType,proto3,enum=uwGrpc.EventType" json:"eventType,omitempty"`
	CustomerDefinedEventType string        `protobuf:"bytes,7,opt,name=customerDefinedEventType,proto3" json:"customerDefinedEventType,omitempty"`
	SubEventType             string        `protobuf:"bytes,8,opt,name=subEventType,proto3" json:"subEventType,omitempty"`
}

func (x *CreateChallengeRequest) Reset() {
	*x = CreateChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChallengeRequest) ProtoMessage() {}

func (x *CreateChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChallengeRequest.ProtoReflect.Descriptor instead.
func (*CreateChallengeRequest) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{6}
}

func (x *CreateChallengeRequest) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_UNKNOWN_DEFAULT_CHALLENGE_TYPE
}

func (x *CreateChallengeRequest) GetUserinfo() *UserInfo {
	if x != nil {
		return x.Userinfo
	}
	return nil
}

func (x *CreateChallengeRequest) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CreateChallengeRequest) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *CreateChallengeRequest) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_UNKNOWN_DEFAULT_EVENTTYPE
}

func (x *CreateChallengeRequest) GetCustomerDefinedEventType() string {
	if x != nil {
		return x.CustomerDefinedEventType
	}
	return ""
}

func (x *CreateChallengeRequest) GetSubEventType() string {
	if x != nil {
		return x.SubEventType
	}
	return ""
}

// An error will be returned if creating the challenge fails (eg. phone number is out of service, email bounces)
type CreateChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeID         string                 `protobuf:"bytes,1,opt,name=challengeID,proto3" json:"challengeID,omitempty"`
	Expiry              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	WebauthnCredentials []byte                 `protobuf:"bytes,3,opt,name=webauthnCredentials,proto3" json:"webauthnCredentials,omitempty"`
	Type                ChallengeType          `protobuf:"varint,4,opt,name=type,proto3,enum=uwGrpc.ChallengeType" json:"type,omitempty"`
}

func (x *CreateChallengeResponse) Reset() {
	*x = CreateChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shepherd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChallengeResponse) ProtoMessage() {}

func (x *CreateChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shepherd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChallengeResponse.ProtoReflect.Descriptor instead.
func (*CreateChallengeResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_shepherd_proto_rawDescGZIP(), []int{7}
}

func (x *CreateChallengeResponse) GetChallengeID() string {
	if x != nil {
		return x.ChallengeID
	}
	return ""
}

func (x *CreateChallengeResponse) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *CreateChallengeResponse) GetWebauthnCredentials() []byte {
	if x != nil {
		return x.WebauthnCredentials
	}
	return nil
}

func (x *CreateChallengeResponse) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_UNKNOWN_DEFAULT_CHALLENGE_TYPE
}

var File_userwatch_shepherd_proto protoreflect.FileDescriptor

var file_userwatch_shepherd_proto_rawDesc = []byte{
	0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x65, 0x70,
	0x68, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x75, 0x77, 0x47, 0x72,
	0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x03, 0x0a, 0x16,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x50, 0x4e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x50, 0x4e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x4f, 0x52, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x4f, 0x52, 0x12,
	0x20, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x13,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x77, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x77, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x77, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x1a, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1a, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x94, 0x02, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74,
	0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x32, 0xd5, 0x02, 0x0a, 0x08, 0x53, 0x68, 0x65, 0x70, 0x68, 0x65, 0x72, 0x64,
	0x12, 0x47, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x75,
	0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x75, 0x77, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x75,
	0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e,
	0x3b, 0x75, 0x73, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userwatch_shepherd_proto_rawDescOnce sync.Once
	file_userwatch_shepherd_proto_rawDescData = file_userwatch_shepherd_proto_rawDesc
)

func file_userwatch_shepherd_proto_rawDescGZIP() []byte {
	file_userwatch_shepherd_proto_rawDescOnce.Do(func() {
		file_userwatch_shepherd_proto_rawDescData = protoimpl.X.CompressGZIP(file_userwatch_shepherd_proto_rawDescData)
	})
	return file_userwatch_shepherd_proto_rawDescData
}

var file_userwatch_shepherd_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_userwatch_shepherd_proto_goTypes = []interface{}{
	(*AnalysisResponsePublic)(nil),        // 0: uwGrpc.AnalysisResponsePublic
	(*DeviceListRequest)(nil),             // 1: uwGrpc.DeviceListRequest
	(*DeviceListResponse)(nil),            // 2: uwGrpc.DeviceListResponse
	(*ValidationRequest)(nil),             // 3: uwGrpc.ValidationRequest
	(*ChallengeVerificationRequest)(nil),  // 4: uwGrpc.ChallengeVerificationRequest
	(*ChallengeVerificationResponse)(nil), // 5: uwGrpc.ChallengeVerificationResponse
	(*CreateChallengeRequest)(nil),        // 6: uwGrpc.CreateChallengeRequest
	(*CreateChallengeResponse)(nil),       // 7: uwGrpc.CreateChallengeResponse
	(Outcome)(0),                          // 8: uwGrpc.Outcome
	(*Flag)(nil),                          // 9: uwGrpc.Flag
	(*UserInfo)(nil),                      // 10: uwGrpc.UserInfo
	(*DeviceInfo)(nil),                    // 11: uwGrpc.DeviceInfo
	(*GeoInfo)(nil),                       // 12: uwGrpc.GeoInfo
	(ChallengeType)(0),                    // 13: uwGrpc.ChallengeType
	(EventType)(0),                        // 14: uwGrpc.EventType
	(*wrapperspb.BoolValue)(nil),          // 15: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),         // 16: google.protobuf.Timestamp
}
var file_userwatch_shepherd_proto_depIdxs = []int32{
	8,  // 0: uwGrpc.AnalysisResponsePublic.action:type_name -> uwGrpc.Outcome
	9,  // 1: uwGrpc.AnalysisResponsePublic.flag:type_name -> uwGrpc.Flag
	10, // 2: uwGrpc.AnalysisResponsePublic.userInfo:type_name -> uwGrpc.UserInfo
	11, // 3: uwGrpc.AnalysisResponsePublic.deviceInfo:type_name -> uwGrpc.DeviceInfo
	12, // 4: uwGrpc.AnalysisResponsePublic.geoInfo:type_name -> uwGrpc.GeoInfo
	13, // 5: uwGrpc.AnalysisResponsePublic.supportedChallenges:type_name -> uwGrpc.ChallengeType
	14, // 6: uwGrpc.AnalysisResponsePublic.eventType:type_name -> uwGrpc.EventType
	11, // 7: uwGrpc.DeviceListResponse.devices:type_name -> uwGrpc.DeviceInfo
	10, // 8: uwGrpc.ValidationRequest.userinfo:type_name -> uwGrpc.UserInfo
	4,  // 9: uwGrpc.ValidationRequest.challengeVerification:type_name -> uwGrpc.ChallengeVerificationRequest
	14, // 10: uwGrpc.ValidationRequest.eventType:type_name -> uwGrpc.EventType
	10, // 11: uwGrpc.ChallengeVerificationRequest.userinfo:type_name -> uwGrpc.UserInfo
	13, // 12: uwGrpc.ChallengeVerificationRequest.type:type_name -> uwGrpc.ChallengeType
	15, // 13: uwGrpc.ChallengeVerificationResponse.challengeCompletedSuccessfully:type_name -> google.protobuf.BoolValue
	14, // 14: uwGrpc.ChallengeVerificationResponse.eventType:type_name -> uwGrpc.EventType
	13, // 15: uwGrpc.CreateChallengeRequest.type:type_name -> uwGrpc.ChallengeType
	10, // 16: uwGrpc.CreateChallengeRequest.userinfo:type_name -> uwGrpc.UserInfo
	14, // 17: uwGrpc.CreateChallengeRequest.eventType:type_name -> uwGrpc.EventType
	16, // 18: uwGrpc.CreateChallengeResponse.expiry:type_name -> google.protobuf.Timestamp
	13, // 19: uwGrpc.CreateChallengeResponse.type:type_name -> uwGrpc.ChallengeType
	3,  // 20: uwGrpc.Shepherd.validate:input_type -> uwGrpc.ValidationRequest
	1,  // 21: uwGrpc.Shepherd.getDeviceList:input_type -> uwGrpc.DeviceListRequest
	6,  // 22: uwGrpc.Shepherd.createChallenge:input_type -> uwGrpc.CreateChallengeRequest
	4,  // 23: uwGrpc.Shepherd.verifyChallenge:input_type -> uwGrpc.ChallengeVerificationRequest
	0,  // 24: uwGrpc.Shepherd.validate:output_type -> uwGrpc.AnalysisResponsePublic
	2,  // 25: uwGrpc.Shepherd.getDeviceList:output_type -> uwGrpc.DeviceListResponse
	7,  // 26: uwGrpc.Shepherd.createChallenge:output_type -> uwGrpc.CreateChallengeResponse
	5,  // 27: uwGrpc.Shepherd.verifyChallenge:output_type -> uwGrpc.ChallengeVerificationResponse
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_userwatch_shepherd_proto_init() }
func file_userwatch_shepherd_proto_init() {
	if File_userwatch_shepherd_proto != nil {
		return
	}
	file_userwatch_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_userwatch_shepherd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisResponsePublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shepherd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shepherd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shepherd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shepherd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shepherd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeVerificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shepherd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shepherd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userwatch_shepherd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userwatch_shepherd_proto_goTypes,
		DependencyIndexes: file_userwatch_shepherd_proto_depIdxs,
		MessageInfos:      file_userwatch_shepherd_proto_msgTypes,
	}.Build()
	File_userwatch_shepherd_proto = out.File
	file_userwatch_shepherd_proto_rawDesc = nil
	file_userwatch_shepherd_proto_goTypes = nil
	file_userwatch_shepherd_proto_depIdxs = nil
}
