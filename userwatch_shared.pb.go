// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: userwatch_shared.proto

package userwatchgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNKNOWN_DEFAULT_EVENTTYPE  EventType = 0
	EventType_LOGIN                      EventType = 1
	EventType_REGISTER                   EventType = 2
	EventType_ATTEMPT_PURCHASE           EventType = 3
	EventType_COMPLETE_PURCHASE          EventType = 4
	EventType_ATTEMPT_REDEEM_OFFER       EventType = 5
	EventType_REDEEMED_OFFER             EventType = 6
	EventType_VERIFY_DEVICE              EventType = 7
	EventType_REPORT_DEVICE              EventType = 8
	EventType_ADD_TEAM_MEMBER            EventType = 9
	EventType_REMOVE_TEAM_MEMBER         EventType = 10
	EventType_ADD_PAYMENT_METHOD         EventType = 11
	EventType_ATTEMPT_DELETE_ACCOUNT     EventType = 12
	EventType_CUSTOMER_DEFINED_EVENTTYPE EventType = 13
	EventType_START_SUBSCRIPTION         EventType = 14
	EventType_END_SUBSCRIPTION           EventType = 15
	EventType_HEARTBEAT                  EventType = 16
	EventType_PAGE_VISIT                 EventType = 17
	EventType_LOGIN_SUCCESS              EventType = 18
	EventType_REGISTER_SUCCESS           EventType = 19
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "UNKNOWN_DEFAULT_EVENTTYPE",
		1:  "LOGIN",
		2:  "REGISTER",
		3:  "ATTEMPT_PURCHASE",
		4:  "COMPLETE_PURCHASE",
		5:  "ATTEMPT_REDEEM_OFFER",
		6:  "REDEEMED_OFFER",
		7:  "VERIFY_DEVICE",
		8:  "REPORT_DEVICE",
		9:  "ADD_TEAM_MEMBER",
		10: "REMOVE_TEAM_MEMBER",
		11: "ADD_PAYMENT_METHOD",
		12: "ATTEMPT_DELETE_ACCOUNT",
		13: "CUSTOMER_DEFINED_EVENTTYPE",
		14: "START_SUBSCRIPTION",
		15: "END_SUBSCRIPTION",
		16: "HEARTBEAT",
		17: "PAGE_VISIT",
		18: "LOGIN_SUCCESS",
		19: "REGISTER_SUCCESS",
	}
	EventType_value = map[string]int32{
		"UNKNOWN_DEFAULT_EVENTTYPE":  0,
		"LOGIN":                      1,
		"REGISTER":                   2,
		"ATTEMPT_PURCHASE":           3,
		"COMPLETE_PURCHASE":          4,
		"ATTEMPT_REDEEM_OFFER":       5,
		"REDEEMED_OFFER":             6,
		"VERIFY_DEVICE":              7,
		"REPORT_DEVICE":              8,
		"ADD_TEAM_MEMBER":            9,
		"REMOVE_TEAM_MEMBER":         10,
		"ADD_PAYMENT_METHOD":         11,
		"ATTEMPT_DELETE_ACCOUNT":     12,
		"CUSTOMER_DEFINED_EVENTTYPE": 13,
		"START_SUBSCRIPTION":         14,
		"END_SUBSCRIPTION":           15,
		"HEARTBEAT":                  16,
		"PAGE_VISIT":                 17,
		"LOGIN_SUCCESS":              18,
		"REGISTER_SUCCESS":           19,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_shared_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_userwatch_shared_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{0}
}

type ChallengeType int32

const (
	ChallengeType_UNKNOWN_DEFAULT_CHALLENGE_TYPE ChallengeType = 0
	ChallengeType_CHALLENGE_TYPE_WEBAUTHN        ChallengeType = 1
	ChallengeType_CHALLENGE_TYPE_SMS             ChallengeType = 2
	ChallengeType_CHALLENGE_TYPE_EMAIL           ChallengeType = 3
	ChallengeType_CHALLENGE_TYPE_BANKSY          ChallengeType = 4
)

// Enum value maps for ChallengeType.
var (
	ChallengeType_name = map[int32]string{
		0: "UNKNOWN_DEFAULT_CHALLENGE_TYPE",
		1: "CHALLENGE_TYPE_WEBAUTHN",
		2: "CHALLENGE_TYPE_SMS",
		3: "CHALLENGE_TYPE_EMAIL",
		4: "CHALLENGE_TYPE_BANKSY",
	}
	ChallengeType_value = map[string]int32{
		"UNKNOWN_DEFAULT_CHALLENGE_TYPE": 0,
		"CHALLENGE_TYPE_WEBAUTHN":        1,
		"CHALLENGE_TYPE_SMS":             2,
		"CHALLENGE_TYPE_EMAIL":           3,
		"CHALLENGE_TYPE_BANKSY":          4,
	}
)

func (x ChallengeType) Enum() *ChallengeType {
	p := new(ChallengeType)
	*p = x
	return p
}

func (x ChallengeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_shared_proto_enumTypes[1].Descriptor()
}

func (ChallengeType) Type() protoreflect.EnumType {
	return &file_userwatch_shared_proto_enumTypes[1]
}

func (x ChallengeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeType.Descriptor instead.
func (ChallengeType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{1}
}

type Outcome int32

const (
	Outcome_UNKNOWN_DEFAULT_OUTCOME  Outcome = 0
	Outcome_DENY                     Outcome = 1
	Outcome_CHALLENGE                Outcome = 2
	Outcome_PERMIT                   Outcome = 3
	Outcome_OFFER                    Outcome = 4
	Outcome_LOG                      Outcome = 5
	Outcome_CUSTOMER_DEFINED_OUTCOME Outcome = 6
)

// Enum value maps for Outcome.
var (
	Outcome_name = map[int32]string{
		0: "UNKNOWN_DEFAULT_OUTCOME",
		1: "DENY",
		2: "CHALLENGE",
		3: "PERMIT",
		4: "OFFER",
		5: "LOG",
		6: "CUSTOMER_DEFINED_OUTCOME",
	}
	Outcome_value = map[string]int32{
		"UNKNOWN_DEFAULT_OUTCOME":  0,
		"DENY":                     1,
		"CHALLENGE":                2,
		"PERMIT":                   3,
		"OFFER":                    4,
		"LOG":                      5,
		"CUSTOMER_DEFINED_OUTCOME": 6,
	}
)

func (x Outcome) Enum() *Outcome {
	p := new(Outcome)
	*p = x
	return p
}

func (x Outcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Outcome) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_shared_proto_enumTypes[2].Descriptor()
}

func (Outcome) Type() protoreflect.EnumType {
	return &file_userwatch_shared_proto_enumTypes[2]
}

func (x Outcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Outcome.Descriptor instead.
func (Outcome) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{2}
}

type DeviceClass int32

const (
	DeviceClass_DESKTOP DeviceClass = 0
	DeviceClass_MOBILE  DeviceClass = 1
	DeviceClass_TABLET  DeviceClass = 2
	DeviceClass_GOODBOT DeviceClass = 3
	DeviceClass_BADBOT  DeviceClass = 4
	DeviceClass_UNKNOWN DeviceClass = 5
)

// Enum value maps for DeviceClass.
var (
	DeviceClass_name = map[int32]string{
		0: "DESKTOP",
		1: "MOBILE",
		2: "TABLET",
		3: "GOODBOT",
		4: "BADBOT",
		5: "UNKNOWN",
	}
	DeviceClass_value = map[string]int32{
		"DESKTOP": 0,
		"MOBILE":  1,
		"TABLET":  2,
		"GOODBOT": 3,
		"BADBOT":  4,
		"UNKNOWN": 5,
	}
)

func (x DeviceClass) Enum() *DeviceClass {
	p := new(DeviceClass)
	*p = x
	return p
}

func (x DeviceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_shared_proto_enumTypes[3].Descriptor()
}

func (DeviceClass) Type() protoreflect.EnumType {
	return &file_userwatch_shared_proto_enumTypes[3]
}

func (x DeviceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceClass.Descriptor instead.
func (DeviceClass) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{3}
}

type FlagType int32

const (
	FlagType_UNKNOWN_DEFAULT_FLAGTYPE        FlagType = 0
	FlagType_ACCOUNT_SHARING                 FlagType = 1
	FlagType_ACCOUNT_SHARING_SAME_HOUSEHOLD  FlagType = 2
	FlagType_SUSPECTED_ACCOUNT_COMPROMISE    FlagType = 3
	FlagType_CREDENTIAL_STUFFING             FlagType = 4
	FlagType_REPEATED_REDEMPTION             FlagType = 5
	FlagType_SUSPECTED_FRAUD                 FlagType = 6
	FlagType_REPEATED_SIGNUP                 FlagType = 7
	FlagType_SUSPECTED_BOT                   FlagType = 8
	FlagType_RATE_LIMITED_IP                 FlagType = 9
	FlagType_RATE_LIMITED_DEVICE             FlagType = 10
	FlagType_BLACKLISTED_IP                  FlagType = 11
	FlagType_BLACKLISTED_DEVICE              FlagType = 12 // DEPRECATED
	FlagType_ACCOUNT_COMPROMISE_NEW_LOCATION FlagType = 13
	FlagType_ACCOUNT_COMPROMISE_NEW_DEVICE   FlagType = 14
	FlagType_REPEATED_ACTION                 FlagType = 15
	FlagType_DISPOSABLE_EMAIL                FlagType = 16
	FlagType_USING_VPN                       FlagType = 17
	FlagType_USING_TOR                       FlagType = 18
	FlagType_DEVICE_BLOCKED_GLOBAlLY         FlagType = 19
	FlagType_DEVICE_BLOCKED_FOR_THIS_USER    FlagType = 20
	FlagType_INVALID_EMAIL                   FlagType = 21
	FlagType_INVALID_PHONE_NUMBER            FlagType = 23
	FlagType_INVALID_PHONE_TYPE              FlagType = 22
	FlagType_MULTIPLE_ACCOUNTS               FlagType = 24
	FlagType_ALREADY_USED_EMAIL              FlagType = 25
	FlagType_ALREADY_USED_PHONE              FlagType = 26
)

// Enum value maps for FlagType.
var (
	FlagType_name = map[int32]string{
		0:  "UNKNOWN_DEFAULT_FLAGTYPE",
		1:  "ACCOUNT_SHARING",
		2:  "ACCOUNT_SHARING_SAME_HOUSEHOLD",
		3:  "SUSPECTED_ACCOUNT_COMPROMISE",
		4:  "CREDENTIAL_STUFFING",
		5:  "REPEATED_REDEMPTION",
		6:  "SUSPECTED_FRAUD",
		7:  "REPEATED_SIGNUP",
		8:  "SUSPECTED_BOT",
		9:  "RATE_LIMITED_IP",
		10: "RATE_LIMITED_DEVICE",
		11: "BLACKLISTED_IP",
		12: "BLACKLISTED_DEVICE",
		13: "ACCOUNT_COMPROMISE_NEW_LOCATION",
		14: "ACCOUNT_COMPROMISE_NEW_DEVICE",
		15: "REPEATED_ACTION",
		16: "DISPOSABLE_EMAIL",
		17: "USING_VPN",
		18: "USING_TOR",
		19: "DEVICE_BLOCKED_GLOBAlLY",
		20: "DEVICE_BLOCKED_FOR_THIS_USER",
		21: "INVALID_EMAIL",
		23: "INVALID_PHONE_NUMBER",
		22: "INVALID_PHONE_TYPE",
		24: "MULTIPLE_ACCOUNTS",
		25: "ALREADY_USED_EMAIL",
		26: "ALREADY_USED_PHONE",
	}
	FlagType_value = map[string]int32{
		"UNKNOWN_DEFAULT_FLAGTYPE":        0,
		"ACCOUNT_SHARING":                 1,
		"ACCOUNT_SHARING_SAME_HOUSEHOLD":  2,
		"SUSPECTED_ACCOUNT_COMPROMISE":    3,
		"CREDENTIAL_STUFFING":             4,
		"REPEATED_REDEMPTION":             5,
		"SUSPECTED_FRAUD":                 6,
		"REPEATED_SIGNUP":                 7,
		"SUSPECTED_BOT":                   8,
		"RATE_LIMITED_IP":                 9,
		"RATE_LIMITED_DEVICE":             10,
		"BLACKLISTED_IP":                  11,
		"BLACKLISTED_DEVICE":              12,
		"ACCOUNT_COMPROMISE_NEW_LOCATION": 13,
		"ACCOUNT_COMPROMISE_NEW_DEVICE":   14,
		"REPEATED_ACTION":                 15,
		"DISPOSABLE_EMAIL":                16,
		"USING_VPN":                       17,
		"USING_TOR":                       18,
		"DEVICE_BLOCKED_GLOBAlLY":         19,
		"DEVICE_BLOCKED_FOR_THIS_USER":    20,
		"INVALID_EMAIL":                   21,
		"INVALID_PHONE_NUMBER":            23,
		"INVALID_PHONE_TYPE":              22,
		"MULTIPLE_ACCOUNTS":               24,
		"ALREADY_USED_EMAIL":              25,
		"ALREADY_USED_PHONE":              26,
	}
)

func (x FlagType) Enum() *FlagType {
	p := new(FlagType)
	*p = x
	return p
}

func (x FlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_shared_proto_enumTypes[4].Descriptor()
}

func (FlagType) Type() protoreflect.EnumType {
	return &file_userwatch_shared_proto_enumTypes[4]
}

func (x FlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagType.Descriptor instead.
func (FlagType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{4}
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                 string            `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserEmail              string            `protobuf:"bytes,2,opt,name=userEmail,proto3" json:"userEmail,omitempty"`
	UserPhone              string            `protobuf:"bytes,3,opt,name=userPhone,proto3" json:"userPhone,omitempty"`
	UserName               string            `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	UserImage              string            `protobuf:"bytes,5,opt,name=userImage,proto3" json:"userImage,omitempty"`
	CustomerSuppliedValues map[string]string `protobuf:"bytes,6,rep,name=customerSuppliedValues,proto3" json:"customerSuppliedValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInfo) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UserInfo) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *UserInfo) GetCustomerSuppliedValues() map[string]string {
	if x != nil {
		return x.CustomerSuppliedValues
	}
	return nil
}

type GeoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoIPLatLng    *LatLng                `protobuf:"bytes,1,opt,name=geoIPLatLng,proto3" json:"geoIPLatLng,omitempty"`
	GeoIPCity      string                 `protobuf:"bytes,2,opt,name=geoIPCity,proto3" json:"geoIPCity,omitempty"`
	GeoIPSubRegion string                 `protobuf:"bytes,3,opt,name=geoIPSubRegion,proto3" json:"geoIPSubRegion,omitempty"`
	GeoIPRegion    string                 `protobuf:"bytes,4,opt,name=geoIPRegion,proto3" json:"geoIPRegion,omitempty"`
	LastHere       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastHere,proto3" json:"lastHere,omitempty"`
}

func (x *GeoInfo) Reset() {
	*x = GeoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoInfo) ProtoMessage() {}

func (x *GeoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoInfo.ProtoReflect.Descriptor instead.
func (*GeoInfo) Descriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{1}
}

func (x *GeoInfo) GetGeoIPLatLng() *LatLng {
	if x != nil {
		return x.GeoIPLatLng
	}
	return nil
}

func (x *GeoInfo) GetGeoIPCity() string {
	if x != nil {
		return x.GeoIPCity
	}
	return ""
}

func (x *GeoInfo) GetGeoIPSubRegion() string {
	if x != nil {
		return x.GeoIPSubRegion
	}
	return ""
}

func (x *GeoInfo) GetGeoIPRegion() string {
	if x != nil {
		return x.GeoIPRegion
	}
	return ""
}

func (x *GeoInfo) GetLastHere() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHere
	}
	return nil
}

type LatLng struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latitude in degrees. It must be in the range [-90.0, +90.0].
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// The longitude in degrees. It must be in the range [-180.0, +180.0].
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LatLng) Reset() {
	*x = LatLng{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLng) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLng) ProtoMessage() {}

func (x *LatLng) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLng.ProtoReflect.Descriptor instead.
func (*LatLng) Descriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{2}
}

func (x *LatLng) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LatLng) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID           string                 `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	OS                 string                 `protobuf:"bytes,2,opt,name=OS,proto3" json:"OS,omitempty"`
	DeviceClass        DeviceClass            `protobuf:"varint,3,opt,name=deviceClass,proto3,enum=uwGrpc.DeviceClass" json:"deviceClass,omitempty"`
	DeviceName         string                 `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	UserAgent          string                 `protobuf:"bytes,5,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	Browser            string                 `protobuf:"bytes,6,opt,name=browser,proto3" json:"browser,omitempty"`
	LastUsed           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastUsed,proto3" json:"lastUsed,omitempty"`
	BlockedGlobally    bool                   `protobuf:"varint,8,opt,name=blockedGlobally,proto3" json:"blockedGlobally,omitempty"`
	BlockedForThisUser bool                   `protobuf:"varint,9,opt,name=blockedForThisUser,proto3" json:"blockedForThisUser,omitempty"` // Will always be false if request is unrelated to a single user
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceInfo) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *DeviceInfo) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *DeviceInfo) GetDeviceClass() DeviceClass {
	if x != nil {
		return x.DeviceClass
	}
	return DeviceClass_DESKTOP
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *DeviceInfo) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *DeviceInfo) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

func (x *DeviceInfo) GetBlockedGlobally() bool {
	if x != nil {
		return x.BlockedGlobally
	}
	return false
}

func (x *DeviceInfo) GetBlockedForThisUser() bool {
	if x != nil {
		return x.BlockedForThisUser
	}
	return false
}

type Flags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag []*Flag `protobuf:"bytes,1,rep,name=flag,proto3" json:"flag,omitempty"`
}

func (x *Flags) Reset() {
	*x = Flags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flags) ProtoMessage() {}

func (x *Flags) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flags.ProtoReflect.Descriptor instead.
func (*Flags) Descriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{4}
}

func (x *Flags) GetFlag() []*Flag {
	if x != nil {
		return x.Flag
	}
	return nil
}

type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                FlagType               `protobuf:"varint,1,opt,name=type,proto3,enum=uwGrpc.FlagType" json:"type,omitempty"`
	FirstFlagged        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=firstFlagged,proto3" json:"firstFlagged,omitempty"`
	MostRecentlyFlagged *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=mostRecentlyFlagged,proto3" json:"mostRecentlyFlagged,omitempty"`
	// Max time will be used to say forever, nil is not ignored
	IgnoredUntil *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ignoredUntil,proto3" json:"ignoredUntil,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{5}
}

func (x *Flag) GetType() FlagType {
	if x != nil {
		return x.Type
	}
	return FlagType_UNKNOWN_DEFAULT_FLAGTYPE
}

func (x *Flag) GetFirstFlagged() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstFlagged
	}
	return nil
}

func (x *Flag) GetMostRecentlyFlagged() *timestamppb.Timestamp {
	if x != nil {
		return x.MostRecentlyFlagged
	}
	return nil
}

func (x *Flag) GetIgnoredUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.IgnoredUntil
	}
	return nil
}

type ValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidationToken     string `protobuf:"bytes,1,opt,name=validationToken,proto3" json:"validationToken,omitempty"`
	ValidationSignature string `protobuf:"bytes,2,opt,name=validationSignature,proto3" json:"validationSignature,omitempty"`
}

func (x *ValidateResponse) Reset() {
	*x = ValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_shared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResponse) ProtoMessage() {}

func (x *ValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_shared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResponse.ProtoReflect.Descriptor instead.
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_shared_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateResponse) GetValidationToken() string {
	if x != nil {
		return x.ValidationToken
	}
	return ""
}

func (x *ValidateResponse) GetValidationSignature() string {
	if x != nil {
		return x.ValidationSignature
	}
	return ""
}

var File_userwatch_shared_proto protoreflect.FileDescriptor

var file_userwatch_shared_proto_rawDesc = []byte{
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x16,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75,
	0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01,
	0x0a, 0x07, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x67, 0x65, 0x6f,
	0x49, 0x50, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0b,
	0x67, 0x65, 0x6f, 0x49, 0x50, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x65, 0x6f, 0x49, 0x50, 0x43, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x65, 0x6f, 0x49, 0x50, 0x43, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6f,
	0x49, 0x50, 0x53, 0x75, 0x62, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x49, 0x50, 0x53, 0x75, 0x62, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x49, 0x50, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x49, 0x50, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x72, 0x65, 0x22, 0x42, 0x0a, 0x06, 0x4c,
	0x61, 0x74, 0x4c, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0xd9, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x69, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x54, 0x68, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x75, 0x77, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13,
	0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x22, 0x6e, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2a, 0xbb, 0x03, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x54,
	0x45, 0x4d, 0x50, 0x54, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x43,
	0x48, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50,
	0x54, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x46,
	0x45, 0x52, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44,
	0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x47, 0x45,
	0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x13, 0x2a, 0x9d, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x41, 0x55, 0x54,
	0x48, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x53, 0x59, 0x10,
	0x04, 0x2a, 0x7d, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e,
	0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x06,
	0x2a, 0x58, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4f, 0x4f, 0x44, 0x42, 0x4f, 0x54, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x44, 0x42, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x2a, 0xa8, 0x05, 0x0a, 0x08, 0x46,
	0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x41,
	0x4d, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x55, 0x46, 0x46, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x54, 0x10, 0x08, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f,
	0x49, 0x50, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x10,
	0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x5f,
	0x4e, 0x45, 0x57, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f,
	0x4d, 0x49, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x6c, 0x4c, 0x59, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x48,
	0x49, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x16, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x53, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x19, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x10, 0x1a, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userwatch_shared_proto_rawDescOnce sync.Once
	file_userwatch_shared_proto_rawDescData = file_userwatch_shared_proto_rawDesc
)

func file_userwatch_shared_proto_rawDescGZIP() []byte {
	file_userwatch_shared_proto_rawDescOnce.Do(func() {
		file_userwatch_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_userwatch_shared_proto_rawDescData)
	})
	return file_userwatch_shared_proto_rawDescData
}

var file_userwatch_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_userwatch_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_userwatch_shared_proto_goTypes = []interface{}{
	(EventType)(0),                // 0: uwGrpc.EventType
	(ChallengeType)(0),            // 1: uwGrpc.ChallengeType
	(Outcome)(0),                  // 2: uwGrpc.Outcome
	(DeviceClass)(0),              // 3: uwGrpc.DeviceClass
	(FlagType)(0),                 // 4: uwGrpc.FlagType
	(*UserInfo)(nil),              // 5: uwGrpc.UserInfo
	(*GeoInfo)(nil),               // 6: uwGrpc.GeoInfo
	(*LatLng)(nil),                // 7: uwGrpc.LatLng
	(*DeviceInfo)(nil),            // 8: uwGrpc.DeviceInfo
	(*Flags)(nil),                 // 9: uwGrpc.Flags
	(*Flag)(nil),                  // 10: uwGrpc.Flag
	(*ValidateResponse)(nil),      // 11: uwGrpc.ValidateResponse
	nil,                           // 12: uwGrpc.UserInfo.CustomerSuppliedValuesEntry
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_userwatch_shared_proto_depIdxs = []int32{
	12, // 0: uwGrpc.UserInfo.customerSuppliedValues:type_name -> uwGrpc.UserInfo.CustomerSuppliedValuesEntry
	7,  // 1: uwGrpc.GeoInfo.geoIPLatLng:type_name -> uwGrpc.LatLng
	13, // 2: uwGrpc.GeoInfo.lastHere:type_name -> google.protobuf.Timestamp
	3,  // 3: uwGrpc.DeviceInfo.deviceClass:type_name -> uwGrpc.DeviceClass
	13, // 4: uwGrpc.DeviceInfo.lastUsed:type_name -> google.protobuf.Timestamp
	10, // 5: uwGrpc.Flags.flag:type_name -> uwGrpc.Flag
	4,  // 6: uwGrpc.Flag.type:type_name -> uwGrpc.FlagType
	13, // 7: uwGrpc.Flag.firstFlagged:type_name -> google.protobuf.Timestamp
	13, // 8: uwGrpc.Flag.mostRecentlyFlagged:type_name -> google.protobuf.Timestamp
	13, // 9: uwGrpc.Flag.ignoredUntil:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_userwatch_shared_proto_init() }
func file_userwatch_shared_proto_init() {
	if File_userwatch_shared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userwatch_shared_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shared_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shared_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLng); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shared_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shared_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shared_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_shared_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userwatch_shared_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_userwatch_shared_proto_goTypes,
		DependencyIndexes: file_userwatch_shared_proto_depIdxs,
		EnumInfos:         file_userwatch_shared_proto_enumTypes,
		MessageInfos:      file_userwatch_shared_proto_msgTypes,
	}.Build()
	File_userwatch_shared_proto = out.File
	file_userwatch_shared_proto_rawDesc = nil
	file_userwatch_shared_proto_goTypes = nil
	file_userwatch_shared_proto_depIdxs = nil
}
